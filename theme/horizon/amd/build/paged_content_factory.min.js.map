{"version":3,"file":"paged_content_factory.min.js","sources":["../src/paged_content_factory.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Factory to create a paged content widget.\r\n *\r\n * @module     theme_horizon/paged_content_factory\r\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(\r\n[\r\n    'jquery',\r\n    'core/templates',\r\n    'core/notification',\r\n    'theme_horizon/paged_content',\r\n    'theme_horizon/paged_content_pages',\r\n    'core/pubsub',\r\n    'core/ajax'\r\n],\r\nfunction(\r\n    $,\r\n    Templates,\r\n    Notification,\r\n    PagedContent,\r\n    PagedContentEvents,\r\n    PubSub,\r\n    Ajax\r\n) {\r\n    var TEMPLATES = {\r\n        PAGED_CONTENT: 'theme_horizon/paged_content'\r\n    };\r\n\r\n    var DEFAULT = {\r\n        ITEMS_PER_PAGE_SINGLE: 25,\r\n        ITEMS_PER_PAGE_ARRAY: [25, 50, 100, 0],\r\n        MAX_PAGES: 3,\r\n        MAX_DISPLAY: 10\r\n    };\r\n\r\n    /**\r\n     * Get the default context to render the paged content mustache\r\n     * template.\r\n     *\r\n     * @return {object}\r\n     */\r\n    var getDefaultTemplateContext = function() {\r\n        return {\r\n            pagingbar: false,\r\n            pagingdropdown: false,\r\n            skipjs: true,\r\n            ignorecontrolwhileloading: true,\r\n            controlplacementbottom: false\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Get the default context to render the paging bar mustache template.\r\n     *\r\n     * @return {object}\r\n     */\r\n    var getDefaultPagingBarTemplateContext = function() {\r\n        return {\r\n            showitemsperpageselector: false,\r\n            itemsperpage: 35,\r\n            previous: true,\r\n            next: true,\r\n            activepagenumber: 1,\r\n            hidecontrolonsinglepage: true,\r\n            pages: []\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Calculate the number of pages required for the given number of items and\r\n     * how many of each item should appear on a page.\r\n     *\r\n     * @param  {Number} numberOfItems How many items in total.\r\n     * @param  {Number} itemsPerPage  How many items will be shown per page.\r\n     * @return {Number} The number of pages required.\r\n     */\r\n    var calculateNumberOfPages = function(numberOfItems, itemsPerPage) {\r\n        var numberOfPages = 1;\r\n\r\n        if (numberOfItems > 0) {\r\n            var partial = numberOfItems % itemsPerPage;\r\n\r\n            if (partial) {\r\n                numberOfItems -= partial;\r\n                numberOfPages = (numberOfItems / itemsPerPage) + 1;\r\n            } else {\r\n                numberOfPages = numberOfItems / itemsPerPage;\r\n            }\r\n        }\r\n\r\n        return numberOfPages;\r\n    };\r\n\r\n    /**\r\n     * Build the context for the paging bar template when we have a known number\r\n     * of items.\r\n     *\r\n     * @param {Number} numberOfItems How many items in total.\r\n     * @param {Number} itemsPerPage  How many items will be shown per page.\r\n     * @return {object} Mustache template\r\n     */\r\n    var buildPagingBarTemplateContextKnownLength = function(numberOfItems, itemsPerPage) {\r\n        if (itemsPerPage === null) {\r\n            itemsPerPage = DEFAULT.ITEMS_PER_PAGE_SINGLE;\r\n        }\r\n\r\n        if ($.isArray(itemsPerPage)) {\r\n            // If we're given a total number of pages then we don't support a variable\r\n            // set of items per page so just use the first one.\r\n            itemsPerPage = itemsPerPage[0];\r\n        }\r\n\r\n        var context = getDefaultPagingBarTemplateContext();\r\n        context.itemsperpage = itemsPerPage;\r\n        var numberOfPages = calculateNumberOfPages(numberOfItems, itemsPerPage);\r\n\r\n        for (var i = 1; i <= numberOfPages; i++) {\r\n           \r\n            var page = {\r\n                number: i,\r\n                page: i,\r\n            };\r\n            // Make the first page active by default.\r\n            if (i === 1) {\r\n                page.active = true;\r\n            }\r\n            page.dotclass = false;\r\n            if(i <= 8 || i == numberOfPages){\r\n                page.hiddenclass = \"\";\r\n            }else{\r\n                page.hiddenclass = \"hidden\";\r\n            }\r\n            if(numberOfPages -1 > 8 && i == numberOfPages -1){\r\n                page.dotclass = true;\r\n            }\r\n            context.pages.push(page);\r\n        }\r\n        return context;\r\n    };\r\n\r\n    /**\r\n     * Convert the itemsPerPage value into a format applicable for the mustache template.\r\n     * The given value can be either a single integer or an array of integers / objects.\r\n     *\r\n     * E.g.\r\n     * In: [5, 10]\r\n     * out: [{value: 5, active: true}, {value: 10, active: false}]\r\n     *\r\n     * In: [5, {value: 10, active: true}]\r\n     * Out: [{value: 5, active: false}, {value: 10, active: true}]\r\n     *\r\n     * In: [{value: 5, active: false}, {value: 10, active: true}]\r\n     * Out: [{value: 5, active: false}, {value: 10, active: true}]\r\n     *\r\n     * @param {int|int[]} itemsPerPage Options for number of items per page.\r\n     * @return {int|array}\r\n     */\r\n    var buildItemsPerPagePagingBarContext = function(itemsPerPage) {\r\n        if ($.isArray(itemsPerPage)) {\r\n            // Convert the array into a format accepted by the template.\r\n            var context = itemsPerPage.map(function(num) {\r\n                if (typeof num === 'number') {\r\n                    // If the item is just a plain number then convert it into\r\n                    // an object with value and active keys.\r\n                    return {\r\n                        value: num,\r\n                        active: false\r\n                    };\r\n                } else {\r\n                    // Otherwise we assume the caller has specified things correctly.\r\n                    return num;\r\n                }\r\n            });\r\n\r\n            var activeItems = context.filter(function(item) {\r\n                return item.active;\r\n            });\r\n\r\n            // Default the first item to active if one hasn't been specified.\r\n            if (!activeItems.length) {\r\n                context[0].active = true;\r\n            }\r\n\r\n            return context;\r\n        } else {\r\n            return itemsPerPage;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Build the context for the paging bar template when we have an unknown\r\n     * number of items.\r\n     *\r\n     * @param {Number} itemsPerPage  How many items will be shown per page.\r\n     * @return {object} Mustache template\r\n     */\r\n    var buildPagingBarTemplateContextUnknownLength = function(itemsPerPage) {\r\n        if (itemsPerPage === null) {\r\n            itemsPerPage = DEFAULT.ITEMS_PER_PAGE_ARRAY;\r\n        }\r\n\r\n        var context = getDefaultPagingBarTemplateContext();\r\n        context.itemsperpage = buildItemsPerPagePagingBarContext(itemsPerPage);\r\n        context.showitemsperpageselector = $.isArray(itemsPerPage);\r\n\r\n        return context;\r\n    };\r\n\r\n    /**\r\n     * Build the context to render the paging bar template with based on the number\r\n     * of pages to show.\r\n     *\r\n     * @param  {int|null} numberOfItems How many items are there total.\r\n     * @param  {int|null} itemsPerPage  How many items will be shown per page.\r\n     * @return {object} The template context.\r\n     */\r\n    var buildPagingBarTemplateContext = function(numberOfItems, itemsPerPage) {\r\n        if (numberOfItems) {\r\n            return buildPagingBarTemplateContextKnownLength(numberOfItems, itemsPerPage);\r\n        } else {\r\n            return buildPagingBarTemplateContextUnknownLength(itemsPerPage);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Build the context to render the paging dropdown template based on the number\r\n     * of pages to show and items per page.\r\n     *\r\n     * This control is rendered with a gradual increase of the items per page to\r\n     * limit the number of pages in the dropdown. Each page will show twice as much\r\n     * as the previous page (except for the first two pages).\r\n     *\r\n     * By default there will only be 4 pages shown (including the \"All\" option) unless\r\n     * a different number of pages is defined using the maxPages config value.\r\n     *\r\n     * For example:\r\n     * Items per page = 25\r\n     * Would render a dropdown will 4 options:\r\n     * 25\r\n     * 50\r\n     * 100\r\n     * All\r\n     *\r\n     * @param  {Number} itemsPerPage  How many items will be shown per page.\r\n     * @param  {object} config  Configuration options provided by the client.\r\n     * @return {object} The template context.\r\n     */\r\n    var buildPagingDropdownTemplateContext = function(itemsPerPage, config) {\r\n        if (itemsPerPage === null) {\r\n            itemsPerPage = DEFAULT.ITEMS_PER_PAGE_SINGLE;\r\n        }\r\n\r\n        if ($.isArray(itemsPerPage)) {\r\n            // If we're given an array for the items per page, rather than a number,\r\n            // then just use that as the options for the dropdown.\r\n            return {\r\n                options: itemsPerPage\r\n            };\r\n        }\r\n\r\n        var context = {\r\n            options: []\r\n        };\r\n\r\n        var totalItems = 0;\r\n        var lastIncrease = 0;\r\n        var maxPages = DEFAULT.MAX_PAGES;\r\n\r\n        if (config.hasOwnProperty('maxPages')) {\r\n            maxPages = config.maxPages;\r\n        }\r\n\r\n        for (var i = 1; i <= maxPages; i++) {\r\n            var itemCount = 0;\r\n\r\n            if (i <= 5) {\r\n                itemCount = itemsPerPage;\r\n                lastIncrease = itemsPerPage;\r\n            } else {\r\n                lastIncrease = lastIncrease * 2;\r\n                itemCount = lastIncrease;\r\n            }\r\n\r\n            totalItems += itemCount;\r\n            var option = {\r\n                itemcount: itemCount,\r\n                content: totalItems\r\n            };\r\n\r\n            // Make the first option active by default.\r\n            if (i === 1) {\r\n                option.active = true;\r\n            }\r\n\r\n            context.options.push(option);\r\n        }\r\n\r\n        return context;\r\n    };\r\n\r\n    /**\r\n     * Build the context to render the paged content template with based on the number\r\n     * of pages to show, items per page, and configuration option.\r\n     *\r\n     * By default the code will render a paging bar for the paging controls unless\r\n     * otherwise specified in the provided config.\r\n     *\r\n     * @param  {int|null} numberOfItems Total number of items.\r\n     * @param  {int|null|array} itemsPerPage  How many items will be shown per page.\r\n     * @param  {object} config  Configuration options provided by the client.\r\n     * @return {object} The template context.\r\n     */\r\n    var buildTemplateContext = function(numberOfItems, itemsPerPage, config) {\r\n        var context = getDefaultTemplateContext();\r\n\r\n        if (config.hasOwnProperty('ignoreControlWhileLoading')) {\r\n            context.ignorecontrolwhileloading = config.ignoreControlWhileLoading;\r\n        }\r\n\r\n        if (config.hasOwnProperty('controlPlacementBottom')) {\r\n            context.controlplacementbottom = config.controlPlacementBottom;\r\n        }\r\n\r\n        if (config.hasOwnProperty('hideControlOnSinglePage')) {\r\n            context.hidecontrolonsinglepage = config.hideControlOnSinglePage;\r\n        }\r\n\r\n        if (config.hasOwnProperty('ariaLabels')) {\r\n            context.arialabels = config.ariaLabels;\r\n        }\r\n\r\n        if (config.hasOwnProperty('dropdown') && config.dropdown) {\r\n            context.pagingdropdown = buildPagingDropdownTemplateContext(itemsPerPage, config);\r\n        } else {\r\n            context.pagingbar = buildPagingBarTemplateContext(numberOfItems, itemsPerPage);\r\n        }\r\n        return context;\r\n    };\r\n\r\n    /**\r\n     * Create a paged content widget where the complete list of items is not loaded\r\n     * up front but will instead be loaded by an ajax request (or similar).\r\n     *\r\n     * The client code must provide a callback function which loads and renders the\r\n     * items for each page. See PagedContent.init for more details.\r\n     *\r\n     * The function will return a deferred that is resolved with a jQuery object\r\n     * for the HTML content and a string for the JavaScript.\r\n     *\r\n     * The current list of configuration options available are:\r\n     *      dropdown {bool} True to render the page control as a dropdown (paging bar is default).\r\n     *      maxPages {Number} The maximum number of pages to show in the dropdown (only works with dropdown option)\r\n     *      ignoreControlWhileLoading {bool} Disable the pagination controls while loading a page (default to true)\r\n     *      controlPlacementBottom {bool} Render controls under paged content (default to false)\r\n     *\r\n     * @param  {function} renderPagesContentCallback  Callback for loading and rendering the items.\r\n     * @param  {object} config  Configuration options provided by the client.\r\n     * @return {promise} Resolved with jQuery HTML and string JS.\r\n     */\r\n    var create = function(renderPagesContentCallback, config) {\r\n        return createWithTotalAndLimit(null, null, renderPagesContentCallback, config);\r\n    };\r\n\r\n    /**\r\n     * Create a paged content widget where the complete list of items is not loaded\r\n     * up front but will instead be loaded by an ajax request (or similar).\r\n     *\r\n     * The client code must provide a callback function which loads and renders the\r\n     * items for each page. See PagedContent.init for more details.\r\n     *\r\n     * The function will return a deferred that is resolved with a jQuery object\r\n     * for the HTML content and a string for the JavaScript.\r\n     *\r\n     * The current list of configuration options available are:\r\n     *      dropdown {bool} True to render the page control as a dropdown (paging bar is default).\r\n     *      maxPages {Number} The maximum number of pages to show in the dropdown (only works with dropdown option)\r\n     *      ignoreControlWhileLoading {bool} Disable the pagination controls while loading a page (default to true)\r\n     *      controlPlacementBottom {bool} Render controls under paged content (default to false)\r\n     *\r\n     * @param  {int|array|null} itemsPerPage  How many items will be shown per page.\r\n     * @param  {function} renderPagesContentCallback  Callback for loading and rendering the items.\r\n     * @param  {object} config  Configuration options provided by the client.\r\n     * @return {promise} Resolved with jQuery HTML and string JS.\r\n     */\r\n    var createWithLimit = function(itemsPerPage, renderPagesContentCallback, config) {\r\n        return createWithTotalAndLimit(null, itemsPerPage, renderPagesContentCallback, config);\r\n    };\r\n\r\n    /**\r\n     * Create a paged content widget where the complete list of items is not loaded\r\n     * up front but will instead be loaded by an ajax request (or similar).\r\n     *\r\n     * The client code must provide a callback function which loads and renders the\r\n     * items for each page. See PagedContent.init for more details.\r\n     *\r\n     * The function will return a deferred that is resolved with a jQuery object\r\n     * for the HTML content and a string for the JavaScript.\r\n     *\r\n     * The current list of configuration options available are:\r\n     *      dropdown {bool} True to render the page control as a dropdown (paging bar is default).\r\n     *      maxPages {Number} The maximum number of pages to show in the dropdown (only works with dropdown option)\r\n     *      ignoreControlWhileLoading {bool} Disable the pagination controls while loading a page (default to true)\r\n     *      controlPlacementBottom {bool} Render controls under paged content (default to false)\r\n     *\r\n     * @param  {int|null} numberOfItems How many items are there in total.\r\n     * @param  {int|array|null} itemsPerPage  How many items will be shown per page.\r\n     * @param  {function} renderPagesContentCallback  Callback for loading and rendering the items.\r\n     * @param  {object} config  Configuration options provided by the client.\r\n     * @return {promise} Resolved with jQuery HTML and string JS.\r\n     */\r\n    var createWithTotalAndLimit = function(numberOfItems, itemsPerPage, renderPagesContentCallback, config) {\r\n        config = config || {};\r\n\r\n        var deferred = $.Deferred();\r\n        var templateContext = buildTemplateContext(numberOfItems, itemsPerPage, config);\r\n\r\n        Templates.render(TEMPLATES.PAGED_CONTENT, templateContext)\r\n            .then(function(html, js) {\r\n                html = $(html);\r\n                var id = html.attr('id');\r\n\r\n                // Set the id to the custom namespace provided\r\n                if (config.hasOwnProperty('eventNamespace')) {\r\n                    id = config.eventNamespace;\r\n                }\r\n\r\n                var container = html;\r\n\r\n                PagedContent.init(container, renderPagesContentCallback, id);\r\n\r\n                registerEvents(id, config);\r\n\r\n                deferred.resolve(html, js);\r\n                return;\r\n            })\r\n            .fail(function(exception) {\r\n                deferred.reject(exception);\r\n            })\r\n            .fail(Notification.exception);\r\n\r\n        return deferred.promise();\r\n    };\r\n\r\n    /**\r\n     * Create a paged content widget where the complete list of items is loaded\r\n     * up front.\r\n     *\r\n     * The client code must provide a callback function which renders the\r\n     * items for each page. The callback will be provided with an array where each\r\n     * value in the array is a the list of items to render for the page.\r\n     *\r\n     * The function will return a deferred that is resolved with a jQuery object\r\n     * for the HTML content and a string for the JavaScript.\r\n     *\r\n     * The current list of configuration options available are:\r\n     *      dropdown {bool} True to render the page control as a dropdown (paging bar is default).\r\n     *      maxPages {Number} The maximum number of pages to show in the dropdown (only works with dropdown option)\r\n     *      ignoreControlWhileLoading {bool} Disable the pagination controls while loading a page (default to true)\r\n     *      controlPlacementBottom {bool} Render controls under paged content (default to false)\r\n     *\r\n     * @param  {array} contentItems The list of items to paginate.\r\n     * @param  {Number} itemsPerPage  How many items will be shown per page.\r\n     * @param  {function} renderContentCallback  Callback for rendering the items for the page.\r\n     * @param  {object} config  Configuration options provided by the client.\r\n     * @return {promise} Resolved with jQuery HTML and string JS.\r\n     */\r\n    var createFromStaticList = function(contentItems, itemsPerPage, renderContentCallback, config) {\r\n        if (typeof config == 'undefined') {\r\n            config = {};\r\n        }\r\n\r\n        var numberOfItems = contentItems.length;\r\n        return createWithTotalAndLimit(numberOfItems, itemsPerPage, function(pagesData) {\r\n            var contentToRender = [];\r\n            pagesData.forEach(function(pageData) {\r\n                var begin = pageData.offset;\r\n                var end = pageData.limit ? begin + pageData.limit : numberOfItems;\r\n                var items = contentItems.slice(begin, end);\r\n                contentToRender.push(items);\r\n            });\r\n\r\n            return renderContentCallback(contentToRender);\r\n        }, config);\r\n    };\r\n\r\n    /**\r\n     * Reset the last page number for the generated paged-content\r\n     * This is used when we need a way to update the last page number outside of the getters callback\r\n     *\r\n     * @param {String} id ID of the paged content container\r\n     * @param {Int} lastPageNumber The last page number\r\n     */\r\n    var resetLastPageNumber = function(id, lastPageNumber) {\r\n        PubSub.publish(id + PagedContentEvents.ALL_ITEMS_LOADED, lastPageNumber);\r\n    };\r\n\r\n    /**\r\n     * Generate the callback handler for the page limit persistence functionality\r\n     *\r\n     * @param {String} persistentLimitKey\r\n     * @return {callback}\r\n     */\r\n    var generateLimitHandler = function(persistentLimitKey) {\r\n        var callback = function(limit) {\r\n            var args = {\r\n                preferences: [\r\n                    {\r\n                        type: persistentLimitKey,\r\n                        value: limit\r\n                    }\r\n                ]\r\n            };\r\n\r\n            var request = {\r\n                methodname: 'core_user_update_user_preferences',\r\n                args: args\r\n            };\r\n            Ajax.call([request]);\r\n        };\r\n\r\n        return callback;\r\n    };\r\n\r\n    /**\r\n     * Set up any events based on config key values\r\n     *\r\n     * @param {string} namespace The namespace for this component\r\n     * @param {object} config Config options passed to the factory\r\n     */\r\n    var registerEvents = function(namespace, config) {\r\n        if (config.hasOwnProperty('persistentLimitKey')) {\r\n            PubSub.subscribe(namespace + PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT,\r\n                generateLimitHandler(config.persistentLimitKey));\r\n        }\r\n    };\r\n\r\n    return {\r\n        create: create,\r\n        createWithLimit: createWithLimit,\r\n        createWithTotalAndLimit: createWithTotalAndLimit,\r\n        createFromStaticList: createFromStaticList,\r\n        // Backwards compatibility just in case anyone was using this.\r\n        createFromAjax: createWithTotalAndLimit,\r\n        resetLastPageNumber: resetLastPageNumber\r\n    };\r\n});\r\n"],"names":["define","$","Templates","Notification","PagedContent","PagedContentEvents","PubSub","Ajax","TEMPLATES","DEFAULT","buildPagingBarTemplateContextUnknownLength","itemsPerPage","context","showitemsperpageselector","itemsperpage","previous","next","activepagenumber","hidecontrolonsinglepage","pages","isArray","map","num","value","active","filter","item","length","buildItemsPerPagePagingBarContext","buildPagingBarTemplateContext","numberOfItems","numberOfPages","partial","calculateNumberOfPages","i","page","number","dotclass","hiddenclass","push","buildPagingBarTemplateContextKnownLength","buildTemplateContext","config","pagingbar","pagingdropdown","skipjs","ignorecontrolwhileloading","controlplacementbottom","hasOwnProperty","ignoreControlWhileLoading","controlPlacementBottom","hideControlOnSinglePage","arialabels","ariaLabels","dropdown","options","totalItems","lastIncrease","maxPages","itemCount","option","itemcount","content","buildPagingDropdownTemplateContext","createWithTotalAndLimit","renderPagesContentCallback","deferred","Deferred","templateContext","render","then","html","js","id","attr","eventNamespace","container","init","registerEvents","resolve","fail","exception","reject","promise","namespace","persistentLimitKey","subscribe","SET_ITEMS_PER_PAGE_LIMIT","limit","request","methodname","args","preferences","type","call","create","createWithLimit","createFromStaticList","contentItems","renderContentCallback","pagesData","contentToRender","forEach","pageData","begin","offset","end","items","slice","createFromAjax","resetLastPageNumber","lastPageNumber","publish","ALL_ITEMS_LOADED"],"mappings":"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"}