{"version":3,"file":"paged_content_paging_bar.min.js","sources":["../src/paged_content_paging_bar.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript to enhance the paged content paging bar.\r\n *\r\n * @module     theme_horizon/paged_content_paging_bar\r\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(\r\n    [\r\n        'jquery',\r\n        'core/custom_interaction_events',\r\n        'core/paged_content_events',\r\n        'core/str',\r\n        'core/pubsub'\r\n    ],\r\n    function(\r\n        $,\r\n        CustomEvents,\r\n        PagedContentEvents,\r\n        Str,\r\n        PubSub\r\n    ) {\r\n\r\n    var SELECTORS = {\r\n        ROOT: '[data-region=\"paging-bar\"]',\r\n        PAGE: '[data-page]',\r\n        PAGE_ITEM: '[data-region=\"page-item\"]',\r\n        PAGE_LINK: '[data-region=\"page-link\"]',\r\n        FIRST_BUTTON: '[data-control=\"first\"]',\r\n        LAST_BUTTON: '[data-control=\"last\"]',\r\n        NEXT_BUTTON: '[data-control=\"next\"]',\r\n        PREVIOUS_BUTTON: '[data-control=\"previous\"]'\r\n    };\r\n\r\n    /**\r\n     * Get the page element by number.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {Number} pageNumber The page number.\r\n     * @return {jQuery}\r\n     */\r\n    var getPageByNumber = function(root, pageNumber) {\r\n        return root.find(SELECTORS.PAGE_ITEM + '[data-page-number=\"' + pageNumber + '\"]');\r\n    };\r\n\r\n    /**\r\n     * Get the next button element.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @return {jQuery}\r\n     */\r\n    var getNextButton = function(root) {\r\n        return root.find(SELECTORS.NEXT_BUTTON);\r\n    };\r\n\r\n    /**\r\n     * Set the last page number after which no more pages\r\n     * should be loaded.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {Number} number Page number.\r\n     */\r\n    var setLastPageNumber = function(root, number) {\r\n        root.attr('data-last-page-number', number);\r\n    };\r\n\r\n    /**\r\n     * Get the last page number.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @return {Number}\r\n     */\r\n    var getLastPageNumber = function(root) {\r\n        return parseInt(root.attr('data-last-page-number'), 10);\r\n    };\r\n\r\n    /**\r\n     * Get the active page number.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @returns {Number} The page number\r\n     */\r\n    var getActivePageNumber = function(root) {\r\n        return parseInt(root.attr('data-active-page-number'), 10);\r\n    };\r\n\r\n    /**\r\n     * Set the active page number.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {Number} number Page number.\r\n     */\r\n    var setActivePageNumber = function(root, number) {\r\n        root.attr('data-active-page-number', number);\r\n    };\r\n\r\n    /**\r\n     * Check if there is an active page number.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @returns {bool}\r\n     */\r\n    var hasActivePageNumber = function(root) {\r\n        var number = getActivePageNumber(root);\r\n        return !isNaN(number) && number != 0;\r\n    };\r\n\r\n    /**\r\n     * Get the page number for a given page.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {object} page The page element.\r\n     * @returns {Number} The page number\r\n     */\r\n    var getPageNumber = function(root, page) {\r\n        if (page.attr('data-page') != undefined) {\r\n            // If it's an actual page then we can just use the page number\r\n            // attribute.\r\n            return parseInt(page.attr('data-page-number'), 10);\r\n        }\r\n\r\n        var pageNumber = 1;\r\n        var activePageNumber = null;\r\n\r\n        switch (page.attr('data-control')) {\r\n            case 'first':\r\n                pageNumber = 1;\r\n                break;\r\n\r\n            case 'last':\r\n                pageNumber = getLastPageNumber(root);\r\n                break;\r\n\r\n            case 'next':\r\n                activePageNumber = getActivePageNumber(root);\r\n                var lastPage = getLastPageNumber(root);\r\n                if (!lastPage) {\r\n                    pageNumber = activePageNumber + 1;\r\n                } else if (activePageNumber && activePageNumber < lastPage) {\r\n                    pageNumber = activePageNumber + 1;\r\n                } else {\r\n                    pageNumber = lastPage;\r\n                }\r\n                break;\r\n\r\n            case 'previous':\r\n                activePageNumber = getActivePageNumber(root);\r\n                if (activePageNumber && activePageNumber > 1) {\r\n                    pageNumber = activePageNumber - 1;\r\n                } else {\r\n                    pageNumber = 1;\r\n                }\r\n                break;\r\n\r\n            default:\r\n                pageNumber = 1;\r\n                break;\r\n        }\r\n\r\n        // Make sure we return an int not a string.\r\n        return parseInt(pageNumber, 10);\r\n    };\r\n\r\n    /**\r\n     * Get the limit of items for each page.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @returns {Number}\r\n     */\r\n    var getLimit = function(root) {\r\n        return parseInt(root.attr('data-items-per-page'), 10);\r\n    };\r\n\r\n    /**\r\n     * Set the limit of items for each page.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {Number} limit Items per page limit.\r\n     */\r\n    var setLimit = function(root, limit) {\r\n        root.attr('data-items-per-page', limit);\r\n    };\r\n\r\n    /**\r\n     * Show the paging bar.\r\n     *\r\n     * @param {object} root The root element.\r\n     */\r\n    var show = function(root) {\r\n        root.removeClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Hide the paging bar.\r\n     *\r\n     * @param {object} root The root element.\r\n     */\r\n    var hide = function(root) {\r\n        root.addClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Disable the next and last buttons in the paging bar.\r\n     *\r\n     * @param {object} root The root element.\r\n     */\r\n    var disableNextControlButtons = function(root) {\r\n        var nextButton = root.find(SELECTORS.NEXT_BUTTON);\r\n        var lastButton = root.find(SELECTORS.LAST_BUTTON);\r\n\r\n        nextButton.addClass('disabled');\r\n        nextButton.attr('aria-disabled', true);\r\n        lastButton.addClass('disabled');\r\n        lastButton.attr('aria-disabled', true);\r\n    };\r\n\r\n    /**\r\n     * Enable the next and last buttons in the paging bar.\r\n     *\r\n     * @param {object} root The root element.\r\n     */\r\n    var enableNextControlButtons = function(root) {\r\n        var nextButton = root.find(SELECTORS.NEXT_BUTTON);\r\n        var lastButton = root.find(SELECTORS.LAST_BUTTON);\r\n\r\n        nextButton.removeClass('disabled');\r\n        nextButton.removeAttr('aria-disabled');\r\n        lastButton.removeClass('disabled');\r\n        lastButton.removeAttr('aria-disabled');\r\n    };\r\n\r\n    /**\r\n     * Disable the previous and first buttons in the paging bar.\r\n     *\r\n     * @param {object} root The root element.\r\n     */\r\n    var disablePreviousControlButtons = function(root) {\r\n        var previousButton = root.find(SELECTORS.PREVIOUS_BUTTON);\r\n        var firstButton = root.find(SELECTORS.FIRST_BUTTON);\r\n\r\n        previousButton.addClass('disabled');\r\n        previousButton.attr('aria-disabled', true);\r\n        firstButton.addClass('disabled');\r\n        firstButton.attr('aria-disabled', true);\r\n    };\r\n\r\n    /**\r\n     * Enable the previous and first buttons in the paging bar.\r\n     *\r\n     * @param {object} root The root element.\r\n     */\r\n    var enablePreviousControlButtons = function(root) {\r\n        var previousButton = root.find(SELECTORS.PREVIOUS_BUTTON);\r\n        var firstButton = root.find(SELECTORS.FIRST_BUTTON);\r\n\r\n        previousButton.removeClass('disabled');\r\n        previousButton.removeAttr('aria-disabled');\r\n        firstButton.removeClass('disabled');\r\n        firstButton.removeAttr('aria-disabled');\r\n    };\r\n\r\n    /**\r\n     * Get the components for a get_string request for the aria-label\r\n     * on a page. The value is a comma separated string of key and\r\n     * component.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @return {array} First element is the key, second is the component.\r\n     */\r\n    var getPageAriaLabelComponents = function(root) {\r\n        var componentString = root.attr('data-aria-label-components-pagination-item');\r\n        var components = componentString.split(',').map(function(component) {\r\n            return component.trim();\r\n        });\r\n        return components;\r\n    };\r\n\r\n    /**\r\n     * Get the components for a get_string request for the aria-label\r\n     * on an active page. The value is a comma separated string of key and\r\n     * component.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @return {array} First element is the key, second is the component.\r\n     */\r\n    var getActivePageAriaLabelComponents = function(root) {\r\n        var componentString = root.attr('data-aria-label-components-pagination-active-item');\r\n        var components = componentString.split(',').map(function(component) {\r\n            return component.trim();\r\n        });\r\n        return components;\r\n    };\r\n\r\n    /**\r\n     * Set page numbers on each of the given items. Page numbers are set\r\n     * from 1..n (where n is the number of items).\r\n     *\r\n     * Sets the active page number to be the last page found with\r\n     * an \"active\" class (if any).\r\n     *\r\n     * Sets the last page number.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {jQuery} items A jQuery list of items.\r\n     */\r\n    var generatePageNumbers = function(root, items) {\r\n        var lastPageNumber = 0;\r\n        setActivePageNumber(root, 0);\r\n\r\n        items.each(function(index, item) {\r\n            var pageNumber = index + 1;\r\n            item = $(item);\r\n            item.attr('data-page-number', pageNumber);\r\n            lastPageNumber++;\r\n\r\n            if (item.hasClass('active')) {\r\n                setActivePageNumber(root, pageNumber);\r\n            }\r\n        });\r\n\r\n        setLastPageNumber(root, lastPageNumber);\r\n    };\r\n\r\n    /**\r\n     * Set the aria-labels on each of the page items in the paging bar.\r\n     * This includes the next, previous, first, and last items.\r\n     *\r\n     * @param {object} root The root element.\r\n     */\r\n    var generateAriaLabels = function(root) {\r\n        var pageAriaLabelComponents = getPageAriaLabelComponents(root);\r\n        var activePageAriaLabelComponents = getActivePageAriaLabelComponents(root);\r\n        var activePageNumber = getActivePageNumber(root);\r\n        var pageItems = root.find(SELECTORS.PAGE_ITEM);\r\n        // We want to request all of the strings at once rather than\r\n        // one at a time.\r\n        var stringRequests = pageItems.map(function(index, page) {\r\n            page = $(page);\r\n            var pageNumber = getPageNumber(root, page);\r\n\r\n            if (pageNumber === activePageNumber) {\r\n                return {\r\n                    key: activePageAriaLabelComponents[0],\r\n                    component: activePageAriaLabelComponents[1],\r\n                    param: pageNumber\r\n                };\r\n            } else {\r\n                return {\r\n                    key: pageAriaLabelComponents[0],\r\n                    component: pageAriaLabelComponents[1],\r\n                    param: pageNumber\r\n                };\r\n            }\r\n        });\r\n\r\n        Str.get_strings(stringRequests).then(function(strings) {\r\n            pageItems.each(function(index, page) {\r\n                page = $(page);\r\n                var string = strings[index];\r\n                page.attr('aria-label', string);\r\n                page.find(SELECTORS.PAGE_LINK).attr('aria-label', string);\r\n            });\r\n\r\n            return strings;\r\n        })\r\n        .catch(function() {\r\n            // No need to interrupt the page if we can't load the aria lang strings.\r\n            return;\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Make the paging bar item for the given page number visible and fire\r\n     * the SHOW_PAGES paged content event to tell any listening content to\r\n     * update.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {Number} pageNumber The number for the page to show.\r\n     * @param {string} id A uniqie id for this instance.\r\n     */\r\n    var showPage = function(root, pageNumber, id) {\r\n        var lastPageNumber = getLastPageNumber(root);\r\n        var isSamePage = pageNumber == getActivePageNumber(root);\r\n        var limit = getLimit(root);\r\n        var offset = (pageNumber - 1) * limit;\r\n\r\n        if (!isSamePage) {\r\n\r\n            // We only need to toggle the active class if the user didn't click\r\n            // on the already active page.\r\n            root.find(SELECTORS.PAGE_ITEM).removeClass('active').removeAttr('aria-current');\r\n           \r\n            for (var i = 1; i <= lastPageNumber; i++) {\r\n                if(i == lastPageNumber-1 && lastPageNumber > 8){\r\n                    var page = getPageByNumber(root, '...');\r\n                }else{\r\n                    var page = getPageByNumber(root, i);\r\n                }\r\n\r\n                if(pageNumber == i){\r\n                    page.addClass('active');\r\n                    page.attr('aria-current', true);\r\n                }\r\n                                    \r\n                if(pageNumber > 0 && lastPageNumber > 8){\r\n                    var minvalues = pageNumber-2;\r\n                    var lastPageNumberbutone = lastPageNumber-1;\r\n                    var diff = lastPageNumberbutone - pageNumber;\r\n                    if(diff < 4 ){\r\n                        if(diff == 1){\r\n                            minvalues = minvalues - 3;\r\n                        }else if(diff == 2){\r\n                            minvalues = minvalues - 2;\r\n                        }else if(diff == 3){\r\n                            minvalues = minvalues - 1;\r\n                        }else if(lastPageNumber == pageNumber){\r\n                            minvalues = minvalues - 5;\r\n                        }else{\r\n                            minvalues = minvalues - 4;\r\n                        }\r\n                    }\r\n\r\n                    var maxvalues = pageNumber+3;\r\n\r\n                    if(pageNumber < 5){\r\n                        if(pageNumber == 4){\r\n                            maxvalues = maxvalues + 1;\r\n                        }else if(pageNumber == 3){\r\n                            maxvalues = maxvalues + 2;\r\n                        }else if(pageNumber == 2){\r\n                            maxvalues = maxvalues + 3;\r\n                        }else if(pageNumber == 1){\r\n                            maxvalues = maxvalues + 4;\r\n                        }\r\n                        var secondpage = $('[data-page-number=\"' + 2 + '\"]').find('[data-region=\"page-link\"]');\r\n                        secondpage.html(2);\r\n\r\n                        var prevpagenumber = lastPageNumber-1;\r\n                        var lastbutonepage = $('[data-page-number=\"' + prevpagenumber + '\"]').find('[data-region=\"page-link\"]');\r\n                        lastbutonepage.html('...');\r\n                    }\r\n\r\n                    if(maxvalues > lastPageNumber){\r\n                        maxvalues = lastPageNumber;\r\n                    }\r\n                    if(i >= minvalues && pageNumber >= i || maxvalues >= i  && i >= pageNumber){\r\n                        page.removeClass('hidden');\r\n                    }else{\r\n                        if(i != lastPageNumber && i > 2){\r\n                            page.addClass('hidden');\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //adding dots\r\n                if(pageNumber > 5 && lastPageNumber > 8){\r\n                    var prevpagenumber = lastPageNumber-1;\r\n                    var lastbutonepage = $('[data-page-number=\"' + prevpagenumber + '\"]').find('[data-region=\"page-link\"]');\r\n                    var lastPageNumberbutone = lastPageNumber-1;\r\n                    var diff = lastPageNumberbutone - pageNumber;\r\n\r\n                    if(pageNumber == prevpagenumber){\r\n                        lastbutonepage.html(prevpagenumber);\r\n                        $('[data-page-number=\"' + prevpagenumber + '\"]').addClass('active');\r\n                    }else{\r\n                        if(diff < 4){\r\n                            lastbutonepage.html(prevpagenumber);\r\n                        }else{\r\n                            lastbutonepage.html('...');\r\n                        }\r\n                    }\r\n                    \r\n\r\n                    var secondpagenumber = 2;\r\n                    var secondpage = $('[data-page-number=\"' + 2 + '\"]').find('[data-region=\"page-link\"]');\r\n                    if(pageNumber == secondpagenumber){\r\n                        secondpage.html(pageNumber);\r\n                    }else{\r\n                        secondpage.html('...');\r\n                    }\r\n                }\r\n\r\n                \r\n            }\r\n            setActivePageNumber(root, pageNumber);\r\n        }\r\n\r\n        // Make sure the control buttons are disabled as the user navigates\r\n        // to either end of the limits.\r\n        if (lastPageNumber && pageNumber >= lastPageNumber) {\r\n            disableNextControlButtons(root);\r\n        } else {\r\n            enableNextControlButtons(root);\r\n        }\r\n\r\n        if (pageNumber > 1) {\r\n            enablePreviousControlButtons(root);\r\n        } else {\r\n            disablePreviousControlButtons(root);\r\n        }\r\n\r\n        generateAriaLabels(root);\r\n\r\n        // This event requires a payload that contains a list of all pages that\r\n        // were activated. In the case of the paging bar we only show one page at\r\n        // a time.\r\n        PubSub.publish(id + PagedContentEvents.SHOW_PAGES, [{\r\n            pageNumber: pageNumber,\r\n            limit: limit,\r\n            offset: offset\r\n        }]);\r\n    };\r\n\r\n    /**\r\n     * Add event listeners for interactions with the paging bar as well as listening\r\n     * for custom paged content events.\r\n     *\r\n     * Each event will trigger different logic to update parts of the paging bar's\r\n     * display.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {string} id A uniqie id for this instance.\r\n     */\r\n    var registerEventListeners = function(root, id) {\r\n        var ignoreControlWhileLoading = root.attr('data-ignore-control-while-loading');\r\n        var loading = false;\r\n\r\n        if (ignoreControlWhileLoading == \"\") {\r\n            // Default to ignoring control while loading if not specified.\r\n            ignoreControlWhileLoading = true;\r\n        }\r\n\r\n        CustomEvents.define(root, [\r\n            CustomEvents.events.activate\r\n        ]);\r\n\r\n        root.on(CustomEvents.events.activate, SELECTORS.PAGE_ITEM, function(e, data) {\r\n            data.originalEvent.preventDefault();\r\n            data.originalEvent.stopPropagation();\r\n\r\n            if (ignoreControlWhileLoading && loading) {\r\n                // Do nothing if configured to ignore control while loading.\r\n                return;\r\n            }\r\n\r\n            var page = $(e.target).closest(SELECTORS.PAGE_ITEM);\r\n\r\n            if (!page.hasClass('disabled')) {\r\n                var pageNumber = getPageNumber(root, page);\r\n                showPage(root, pageNumber, id);\r\n                loading = true;\r\n            }\r\n        });\r\n\r\n        // This event is fired when all of the items have been loaded. Typically used\r\n        // in an \"infinite\" pages context when we don't know the exact number of pages\r\n        // ahead of time.\r\n        PubSub.subscribe(id + PagedContentEvents.ALL_ITEMS_LOADED, function(pageNumber) {\r\n            loading = false;\r\n            var currentLastPage = getLastPageNumber(root);\r\n\r\n            if (!currentLastPage || pageNumber < currentLastPage) {\r\n                // Somehow the value we've got saved is higher than the new\r\n                // value we just received. Perhaps events came out of order.\r\n                // In any case, save the lowest value.\r\n                setLastPageNumber(root, pageNumber);\r\n            }\r\n\r\n            if (pageNumber === 1 && root.attr('data-hide-control-on-single-page')) {\r\n                // If all items were loaded on the first page then we can hide\r\n                // the paging bar because there are no other pages to load.\r\n                hide(root);\r\n                disableNextControlButtons(root);\r\n                disablePreviousControlButtons(root);\r\n            } else {\r\n                show(root);\r\n                disableNextControlButtons(root);\r\n            }\r\n        });\r\n\r\n        // This event is fired after all of the requested pages have been rendered.\r\n        PubSub.subscribe(id + PagedContentEvents.PAGES_SHOWN, function() {\r\n            // All pages have been shown so turn off the loading flag.\r\n            loading = false;\r\n        });\r\n\r\n        // This is triggered when the paging limit is modified.\r\n        PubSub.subscribe(id + PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT, function(limit) {\r\n            // Update the limit.\r\n            setLimit(root, limit);\r\n            setLastPageNumber(root, 0);\r\n            setActivePageNumber(root, 0);\r\n            show(root);\r\n            // Reload the data from page 1 again.\r\n            showPage(root, 1, id);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Initialise the paging bar.\r\n     * @param {object} root The root element.\r\n     * @param {string} id A uniqie id for this instance.\r\n     */\r\n    var init = function(root, id) {\r\n        root = $(root);\r\n        var pages = root.find(SELECTORS.PAGE);\r\n        generatePageNumbers(root, pages);\r\n        registerEventListeners(root, id);\r\n\r\n        if (hasActivePageNumber(root)) {\r\n            var activePageNumber = getActivePageNumber(root);\r\n            // If the the paging bar was rendered with an active page selected\r\n            // then make sure we fired off the event to tell the content page to\r\n            // show.\r\n            getPageByNumber(root, activePageNumber).click();\r\n            if (activePageNumber == 1) {\r\n                // If the first page is active then disable the previous buttons.\r\n                disablePreviousControlButtons(root);\r\n            }\r\n        } else {\r\n            // There was no active page number so load the first page using\r\n            // the next button. This allows the infinite pagination to work.\r\n            getNextButton(root).click();\r\n        }\r\n    };\r\n\r\n    return {\r\n        init: init,\r\n        showPage: showPage,\r\n        rootSelector: SELECTORS.ROOT,\r\n    };\r\n});\r\n"],"names":["define","$","CustomEvents","PagedContentEvents","Str","PubSub","SELECTORS","getPageByNumber","root","pageNumber","find","setLastPageNumber","number","attr","getLastPageNumber","parseInt","getActivePageNumber","setActivePageNumber","getPageNumber","page","undefined","activePageNumber","lastPage","show","removeClass","disableNextControlButtons","nextButton","lastButton","addClass","disablePreviousControlButtons","previousButton","firstButton","showPage","id","lastPageNumber","isSamePage","limit","getLimit","offset","removeAttr","i","minvalues","diff","maxvalues","secondpage","html","lastbutonepage","prevpagenumber","enableNextControlButtons","enablePreviousControlButtons","pageAriaLabelComponents","split","map","component","trim","getPageAriaLabelComponents","activePageAriaLabelComponents","getActivePageAriaLabelComponents","pageItems","stringRequests","index","key","param","get_strings","then","strings","each","string","catch","generateAriaLabels","publish","SHOW_PAGES","init","pages","items","item","hasClass","generatePageNumbers","ignoreControlWhileLoading","loading","events","activate","on","e","data","originalEvent","preventDefault","stopPropagation","target","closest","subscribe","ALL_ITEMS_LOADED","currentLastPage","hide","PAGES_SHOWN","SET_ITEMS_PER_PAGE_LIMIT","setLimit","registerEventListeners","isNaN","hasActivePageNumber","click","getNextButton","rootSelector"],"mappings":"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"}