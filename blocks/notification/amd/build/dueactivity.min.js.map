{"version":3,"file":"dueactivity.min.js","sources":["../src/dueactivity.js"],"sourcesContent":["/**\r\n * Add a create new group modal to the page.\r\n *\r\n * @module     local_batch/Batch\r\n * @class      Batch\r\n * @copyright  2023 Dipanshu\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events',\r\n    'core/fragment', 'core/ajax', 'core/yui'], \r\n    function($, str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @param {int} contextid\r\n     *\r\n     * Each call to init gets it's own instance of this class.\r\n     */\r\n    var NewPopup = function(args) {\r\n        this.contextid = args.contextid;\r\n        this.userid = args.userid;\r\n        var self = this;\r\n        self.init(args.selector);\r\n    };\r\n    /**\r\n     * Initialise the class.\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewPopup.prototype.init = function(selector) {\r\n        var self = this;\r\n\r\n        // program popup.\r\n    $(document).ready(function () {\r\n        $(document).on('click', '#viewactivity', function(){\r\n        \r\n            str.get_string('dueacivity', 'block_notification').then(function(title) { ModalFactory.create({\r\n                    title: title,\r\n                    body: self.getBody()\r\n                }).done(function(modal) {\r\n                    // Keep a reference to the modal.\r\n                    self.modal = modal;\r\n                    self.modal.getRoot().addClass('dueactivitymodal');\r\n                    // Forms are big, we want a big modal.\r\n                    self.modal.setLarge();\r\n         \r\n                    // We want to reset the form every time it is opened.\r\n                    self.modal.getRoot().on(ModalEvents.hidden, function() {\r\n                        // self.modal.setBody('');\r\n                        self.modal.hide();\r\n                        self.modal.destroy();\r\n                    }.bind(this));\r\n\r\n                    // We want to reset the form every time it is opened.\r\n                    self.modal.getRoot().on(ModalEvents.cancel, function() {\r\n                        // self.modal.setBody('');\r\n                        self.modal.hide();\r\n                        self.modal.destroy();\r\n                    }.bind(this));\r\n                    self.modal.show();\r\n                });\r\n\r\n            });\r\n        });\r\n    });\r\n    }\r\n\r\n    \r\n    /**\r\n     * @method getBody\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewPopup.prototype.getBody = function(formdata) {\r\n\r\n        if (typeof formdata === \"undefined\") {\r\n            formdata = {};\r\n        }\r\n        // Get the content of the modal.\r\n        if(typeof this.userid != 'undefined'){\r\n            var params = {userid:this.userid, jsonformdata: JSON.stringify(formdata)};\r\n        }else{\r\n            var params = {};\r\n        }\r\n        \r\n        return Fragment.loadFragment('block_notification', 'due_activities_list', this.contextid, params);\r\n    };\r\n\r\n    return /** @alias module:local_evaluation/newevaluation */ {\r\n        // Public variables and functions.\r\n        /**\r\n         * Attach event listeners to initialise this module.\r\n         *\r\n         * @method init\r\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\r\n         * @param {int} contextid The contextid for the course.\r\n         * @return {Promise}\r\n         */\r\n        init: function(args) {\r\n           \r\n            this.Datatable();\r\n            return new NewPopup(args);\r\n        },\r\n        Datatable: function() {\r\n            \r\n        },\r\n        \r\n    };\r\n});\r\n"],"names":["define","$","str","ModalFactory","ModalEvents","Fragment","Ajax","Y","NewPopup","args","this","contextid","userid","init","selector","prototype","self","document","ready","on","get_string","then","title","create","body","getBody","done","modal","getRoot","addClass","setLarge","hidden","hide","destroy","bind","cancel","show","formdata","params","jsonformdata","JSON","stringify","loadFragment","Datatable"],"mappings":";;;;;;;;AAQAA,wCAAO,CAAC,SAAU,WAAY,qBAAsB,oBAChD,gBAAiB,YAAa,aAC9B,SAASC,EAAGC,IAAKC,aAAcC,YAAaC,SAAUC,KAAMC,GAU5D,IAAIC,SAAW,SAASC,MACpBC,KAAKC,UAAYF,KAAKE,UACtBD,KAAKE,OAASH,KAAKG,OACRF,KACNG,KAAKJ,KAAKK,WAoEnB,OA3DAN,SAASO,UAAUF,KAAO,SAASC,UAC/B,IAAIE,KAAON,KAGfT,EAAEgB,UAAUC,OAAM,WACdjB,EAAEgB,UAAUE,GAAG,QAAS,iBAAiB,WAErCjB,IAAIkB,WAAW,aAAc,sBAAsBC,MAAK,SAASC,OAASnB,aAAaoB,OAAO,CACtFD,MAAOA,MACPE,KAAMR,KAAKS,YACZC,MAAK,SAASC,OAEbX,KAAKW,MAAQA,MACbX,KAAKW,MAAMC,UAAUC,SAAS,oBAE9Bb,KAAKW,MAAMG,WAGXd,KAAKW,MAAMC,UAAUT,GAAGf,YAAY2B,OAAQ,WAExCf,KAAKW,MAAMK,OACXhB,KAAKW,MAAMM,WACbC,KAAKxB,OAGPM,KAAKW,MAAMC,UAAUT,GAAGf,YAAY+B,OAAQ,WAExCnB,KAAKW,MAAMK,OACXhB,KAAKW,MAAMM,WACbC,KAAKxB,OACPM,KAAKW,MAAMS,oBAc3B5B,SAASO,UAAUU,QAAU,SAASY,UAMlC,QAJwB,IAAbA,WACPA,SAAW,SAGU,IAAf3B,KAAKE,OACX,IAAI0B,OAAS,CAAC1B,OAAOF,KAAKE,OAAQ2B,aAAcC,KAAKC,UAAUJ,gBAE3DC,OAAS,GAGjB,OAAOjC,SAASqC,aAAa,qBAAsB,sBAAuBhC,KAAKC,UAAW2B,SAGnC,CAUvDzB,KAAM,SAASJ,MAGX,OADAC,KAAKiC,YACE,IAAInC,SAASC,OAExBkC,UAAW,aAKnB"}