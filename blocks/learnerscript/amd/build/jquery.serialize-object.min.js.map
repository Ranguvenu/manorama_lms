{"version":3,"file":"jquery.serialize-object.min.js","sources":["../src/jquery.serialize-object.js"],"sourcesContent":["/**\r\n * jQuery serializeObject\r\n * @copyright 2014, macek <paulmacek@gmail.com>\r\n * @link https://github.com/macek/jquery-serialize-object\r\n * @license BSD\r\n * @version 2.5.0\r\n */\r\n(function(root, factory) {\r\n\r\n  // AMD\r\n  if (typeof define === \"function\" && define.amd) {\r\n    define([\"exports\", \"jquery\"], function(exports, $) {\r\n      return factory(exports, $);\r\n    });\r\n  }\r\n\r\n  // CommonJS\r\n  else if (typeof exports !== \"undefined\") {\r\n    var $ = require(\"jquery\");\r\n    factory(exports, $);\r\n  }\r\n\r\n  // Browser\r\n  else {\r\n    factory(root, (root.jQuery || root.Zepto || root.ender || root.$));\r\n  }\r\n\r\n}(this, function(exports, $) {\r\n\r\n  var patterns = {\r\n    validate: /^[a-z_][a-z0-9_]*(?:\\[(?:\\d*|[a-z0-9_]+)\\])*$/i,\r\n    key:      /[a-z0-9_]+|(?=\\[\\])/gi,\r\n    push:     /^$/,\r\n    fixed:    /^\\d+$/,\r\n    named:    /^[a-z0-9_]+$/i\r\n  };\r\n\r\n  function FormSerializer(helper, $form) {\r\n\r\n    // private variables\r\n    var data     = {},\r\n        pushes   = {};\r\n\r\n    // private API\r\n    function build(base, key, value) {\r\n      base[key] = value;\r\n      return base;\r\n    }\r\n\r\n    function makeObject(root, value) {\r\n\r\n      var keys = root.match(patterns.key), k;\r\n\r\n      // nest, nest, ..., nest\r\n      while ((k = keys.pop()) !== undefined) {\r\n        // foo[]\r\n        if (patterns.push.test(k)) {\r\n          var idx = incrementPush(root.replace(/\\[\\]$/, ''));\r\n          value = build([], idx, value);\r\n        }\r\n\r\n        // foo[n]\r\n        else if (patterns.fixed.test(k)) {\r\n          value = build([], k, value);\r\n        }\r\n\r\n        // foo; foo[bar]\r\n        else if (patterns.named.test(k)) {\r\n          value = build({}, k, value);\r\n        }\r\n      }\r\n\r\n      return value;\r\n    }\r\n\r\n    function incrementPush(key) {\r\n      if (pushes[key] === undefined) {\r\n        pushes[key] = 0;\r\n      }\r\n      return pushes[key]++;\r\n    }\r\n\r\n    function encode(pair) {\r\n      switch ($('[name=\"' + pair.name + '\"]', $form).attr(\"type\")) {\r\n        case \"checkbox\":\r\n          return pair.value === \"on\" ? true : pair.value;\r\n        default:\r\n          return pair.value;\r\n      }\r\n    }\r\n\r\n    function addPair(pair) {\r\n      if (!patterns.validate.test(pair.name)) return this;\r\n      var obj = makeObject(pair.name, encode(pair));\r\n      data = helper.extend(true, data, obj);\r\n      return this;\r\n    }\r\n\r\n    function addPairs(pairs) {\r\n      if (!helper.isArray(pairs)) {\r\n        throw new Error(\"formSerializer.addPairs expects an Array\");\r\n      }\r\n      for (var i=0, len=pairs.length; i<len; i++) {\r\n        this.addPair(pairs[i]);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    function serialize() {\r\n      return data;\r\n    }\r\n\r\n    function serializeJSON() {\r\n      return JSON.stringify(serialize());\r\n    }\r\n\r\n    // public API\r\n    this.addPair = addPair;\r\n    this.addPairs = addPairs;\r\n    this.serialize = serialize;\r\n    this.serializeJSON = serializeJSON;\r\n  }\r\n\r\n  FormSerializer.patterns = patterns;\r\n\r\n  FormSerializer.serializeObject = function serializeObject() {\r\n    return new FormSerializer($, this).\r\n      addPairs(this.serializeArray()).\r\n      serialize();\r\n  };\r\n\r\n  FormSerializer.serializeJSON = function serializeJSON() {\r\n    return new FormSerializer($, this).\r\n      addPairs(this.serializeArray()).\r\n      serializeJSON();\r\n  };\r\n\r\n  if (typeof $.fn !== \"undefined\") {\r\n    $.fn.serializeObject = FormSerializer.serializeObject;\r\n    $.fn.serializeJSON   = FormSerializer.serializeJSON;\r\n  }\r\n\r\n  exports.FormSerializer = FormSerializer;\r\n\r\n  return FormSerializer;\r\n}));\r\n"],"names":["root","factory","define","amd","exports","$","require","jQuery","Zepto","ender","this","patterns","validate","key","push","fixed","named","FormSerializer","helper","$form","data","pushes","build","base","value","incrementPush","undefined","serialize","addPair","pair","test","name","obj","k","keys","match","pop","replace","makeObject","attr","encode","extend","addPairs","pairs","isArray","Error","i","len","length","serializeJSON","JSON","stringify","serializeObject","serializeArray","fn"],"mappings":";;;;;;;CAOC,SAASA,KAAMC,YAGQ,mBAAXC,QAAyBA,OAAOC,IACzCD,qDAAO,CAAC,UAAW,WAAW,SAASE,QAASC,UACvCJ,QAAQG,QAASC,WAKvB,GAAuB,oBAAZD,QAAyB,KACnCC,EAAIC,QAAQ,UAChBL,QAAQG,QAASC,QAKjBJ,QAAQD,KAAOA,KAAKO,QAAUP,KAAKQ,OAASR,KAAKS,OAAST,KAAKK,GAjBlE,CAoBCK,QAAM,SAASN,QAASC,OAEpBM,SAAW,CACbC,SAAU,iDACVC,IAAU,wBACVC,KAAU,KACVC,MAAU,QACVC,MAAU,0BAGHC,eAAeC,OAAQC,WAG1BC,KAAW,GACXC,OAAW,YAGNC,MAAMC,KAAMV,IAAKW,cACxBD,KAAKV,KAAOW,MACLD,cA6BAE,cAAcZ,iBACDa,IAAhBL,OAAOR,OACTQ,OAAOR,KAAO,GAETQ,OAAOR,gBA6BPc,mBACAP,UAQJQ,iBA1BYC,UACVlB,SAASC,SAASkB,KAAKD,KAAKE,MAAO,OAAOrB,SAC3CsB,aA5CchC,KAAMwB,eAEaS,EAAjCC,KAAOlC,KAAKmC,MAAMxB,SAASE,UAGHa,KAApBO,EAAIC,KAAKE,QAEXzB,SAASG,KAAKgB,KAAKG,GAErBT,MAAQF,MAAM,GADJG,cAAczB,KAAKqC,QAAQ,QAAS,KACvBb,OAIhBb,SAASI,MAAMe,KAAKG,GAC3BT,MAAQF,MAAM,GAAIW,EAAGT,OAIdb,SAASK,MAAMc,KAAKG,KAC3BT,MAAQF,MAAM,GAAIW,EAAGT,eAIlBA,MAqBGc,CAAWT,KAAKE,cAXZF,YAEP,aADCxB,EAAE,UAAYwB,KAAKE,KAAO,KAAMZ,OAAOoB,KAAK,SAE1B,OAAfV,KAAKL,OAELK,KAAKL,MAMgBgB,CAAOX,cACvCT,KAAOF,OAAOuB,QAAO,EAAMrB,KAAMY,KAC1BtB,WAuBJgC,kBApBaC,WACXzB,OAAO0B,QAAQD,aACZ,IAAIE,MAAM,gDAEb,IAAIC,EAAE,EAAGC,IAAIJ,MAAMK,OAAQF,EAAEC,IAAKD,SAChClB,QAAQe,MAAMG,WAEdpC,WAcJiB,UAAYA,eACZsB,gCAPIC,KAAKC,UAAUxB,qBAU1BV,eAAeN,SAAWA,SAE1BM,eAAemC,gBAAkB,kBACxB,IAAInC,eAAeZ,EAAGK,MAC3BgC,SAAShC,KAAK2C,kBACd1B,aAGJV,eAAegC,cAAgB,kBACtB,IAAIhC,eAAeZ,EAAGK,MAC3BgC,SAAShC,KAAK2C,kBACdJ,sBAGgB,IAAT5C,EAAEiD,KACXjD,EAAEiD,GAAGF,gBAAkBnC,eAAemC,gBACtC/C,EAAEiD,GAAGL,cAAkBhC,eAAegC,eAGxC7C,QAAQa,eAAiBA,eAElBA"}