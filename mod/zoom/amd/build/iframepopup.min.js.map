{"version":3,"file":"iframepopup.min.js","sources":["../src/iframepopup.js"],"sourcesContent":["// This file is part of the Zoom plugin for Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Populates or de-populates password field based on whether the\n * password is required or not.\n *\n * @copyright  2024 mod_zoom\n * @author     Moodle India Information Solutions Pvt. Ltd\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n        'core/modal_factory',\n        'core/modal_events',\n        'core/fragment',\n        ],\n    function(ModalFactory, ModalEvents, Fragment) {\n        /**\n         * Constructor\n         *\n         * @param {String} used to find triggers for the new modal.\n         * @param {int} contextid\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        var IframePopup = function(args) {\n            var self = this;\n            self.init(args);\n        };\n        /**\n         * Initialise the class.\n         *\n         * @param {String}  used to find triggers for the new modal.\n         * @private\n         * @return {Promise}\n         */\n        IframePopup.prototype.init = function(args) {\n            var self = this;\n            self.id = args.id;\n            self.recordingid = args.recordingid;\n            ModalFactory.create({\n                // title: str.get_string('iframetitle', 'mod_zoom'),\n                body: self.getBody(),\n                // type: ModalFactory.types.CANCEL,\n            }).done(function(modal) {\n                // Keep a reference to the modal.\n                self.modal = modal;\n                // Forms are big, we want a big modal.\n                self.modal.setLarge();\n     \n                // We want to reset the form every time it is opened.\n                self.modal.getRoot().on(ModalEvents.hidden, function() {\n                    self.modal.destroy();\n                }.bind(this));\n\n                // We want to reset the form every time it is opened.\n                self.modal.getRoot().on(ModalEvents.cancel, function() {\n                    self.modal.destroy();\n                }.bind(this));\n                self.modal.show();\n            });\n        };\n        /**\n         * @method getBody\n         * @private\n         * @return {Promise}\n         */\n        IframePopup.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n            var params = {};\n            // Get the content of the modal.\n            if (typeof this.id != 'undefined') {\n                var params = {jsonformdata: JSON.stringify(formdata), id:this.id, recordingid:this.recordingid };\n            }\n            return Fragment.loadFragment('mod_zoom', 'iframepopup', 1, params);\n        };\n\n        return {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @return {Promise}\n             */\n            init: function(args) {\n                return new IframePopup(args);\n            },\n        };\n    });"],"names":["define","ModalFactory","ModalEvents","Fragment","IframePopup","args","this","init","prototype","self","id","recordingid","create","body","getBody","done","modal","setLarge","getRoot","on","hidden","destroy","bind","cancel","show","formdata","params","jsonformdata","JSON","stringify","loadFragment"],"mappings":";;;;;;;;AAuBAA,8BAAO,CACC,qBACA,oBACA,kBAEJ,SAASC,aAAcC,YAAaC,cAS5BC,YAAc,SAASC,MACZC,KACNC,KAAKF,cASdD,YAAYI,UAAUD,KAAO,SAASF,UAC9BI,KAAOH,KACXG,KAAKC,GAAKL,KAAKK,GACfD,KAAKE,YAAcN,KAAKM,YACxBV,aAAaW,OAAO,CAEhBC,KAAMJ,KAAKK,YAEZC,MAAK,SAASC,OAEbP,KAAKO,MAAQA,MAEbP,KAAKO,MAAMC,WAGXR,KAAKO,MAAME,UAAUC,GAAGjB,YAAYkB,OAAQ,WACxCX,KAAKO,MAAMK,WACbC,KAAKhB,OAGPG,KAAKO,MAAME,UAAUC,GAAGjB,YAAYqB,OAAQ,WACxCd,KAAKO,MAAMK,WACbC,KAAKhB,OACPG,KAAKO,MAAMQ,WAQnBpB,YAAYI,UAAUM,QAAU,SAASW,eACb,IAAbA,WACPA,SAAW,QAEXC,OAAS,WAES,IAAXpB,KAAKI,GACRgB,OAAS,CAACC,aAAcC,KAAKC,UAAUJ,UAAWf,GAAGJ,KAAKI,GAAIC,YAAYL,KAAKK,oBAEhFR,SAAS2B,aAAa,WAAY,cAAe,EAAGJ,SAGxD,CAUHnB,KAAM,SAASF,aACJ,IAAID,YAAYC,OAGlC"}