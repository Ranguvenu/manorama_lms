{"version":3,"file":"submission_confirmation.min.js","sources":["../src/submission_confirmation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handle submission confirmation for quiz.\n *\n * @module    mod_quiz/submission_confirmation\n * @copyright 2022 Huong Nguyen <huongnv13@gmail.com>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since     4.1\n */\n\nimport { saveCancelPromise} from 'core/notification';\nimport Prefetch from 'core/prefetch';\nimport Templates from 'core/templates';\nimport { get_string as getString } from 'core/str';\nimport Ajax from 'core/ajax';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\n\n\nconst SELECTOR = {\n    attemptSubmitButton: '.path-mod-quiz .btn-finishattempt button',\n    attemptSubmitForm: 'form#frm-finishattempt',\n};\n\nconst TEMPLATES = {\n    submissionConfirmation: 'mod_quiz/submission_confirmation',\n};\n\n/**\n * Function to handle the attempt submission logic\n * @param {HTMLElement} submitAction - The submit button element\n * @param {int} unAnsweredQuestions - Total number of un-answered questions\n */\n// core changes for MAN-1156 added by dhasharath.k.\n// start here.\nconst handleAttemptSubmission = async (submitAction, unAnsweredQuestions) => {\n    try {\n        // Get form data\n        const formData = new FormData(submitAction.closest(SELECTOR.attemptSubmitForm));\n\n        // Convert FormData to an object\n        const formDataObject = {};\n        formData.forEach((value, key) => {\n            formDataObject[key] = value;\n        });\n\n        // Send form data to PHP external service\n        const params = {\n            confirm: true,\n            attemptid: formDataObject.attempt,\n            cmid: formDataObject.cmid,\n        };\n\n        const promise = Ajax.call([\n            {\n                methodname: \"local_packages_get_quiz_attempt_data\",\n                args: params,\n            },\n        ]);\n\npromise[0]\n    .done(function (response) {\n        console.log('Server Response:', response);\n\n        // Check if the response contains the expected data\n        if (response && response.result) {\n            console.log('Response Result:', response.result);\n\n            const { answeredcount, wrongcount, unansweredcount, totalquetions, remainingtime, notvisited } = response.result;\n\n            try {\n\n            ModalFactory.create({\n            title: getString(\"examsummery\", \"quiz\"),\n            type: ModalFactory.types.SAVE_CANCEL,\n            body: Templates.render(TEMPLATES.submissionConfirmation, {\n                hasunanswered: unansweredcount > 0,\n                totalunanswered: unansweredcount,\n                answeredcount: answeredcount,\n                totalquetions: totalquetions,\n                remainingtime: remainingtime, \n                notvisited: notvisited\n            }),\n          }).done(\n            function (modal) {\n              this.modal = modal;\n              modal.setSaveButtonText(getString(\"mark\", \"quiz\"));\n              modal.getRoot().on(\n                ModalEvents.save,\n                function (e) {\n                    submitAction.closest(SELECTOR.attemptSubmitForm).submit();\n                }.bind(this)\n              );\n              modal.show();\n            }.bind(this)\n          );\n\n            } catch {\n                // Cancel pressed.\n                return;\n            }\n        } else {\n            // Handle the case where the response doesn't contain the expected data\n            console.log('Error: Invalid response from server', 'error');\n        }\n    })\n    .fail(function () {\n        // Handle the failure scenario\n        console.error('Error: Failed to submit the quiz', 'error');\n    });\n\n    } catch (error) {\n        // Handle errors\n        console.error(`Error: ${error.message}`, 'error');\n    }\n};\n// end here.\n/**\n * Register events for attempt submit button.\n * @param {int} unAnsweredQuestions - Total number of un-answered questions\n */\nconst registerEventListeners = (unAnsweredQuestions) => {\n    const submitAction = document.querySelector(SELECTOR.attemptSubmitButton);\n    if (submitAction) {\n        submitAction.addEventListener('click', async (e) => {\n            e.preventDefault();\n            handleAttemptSubmission(submitAction, unAnsweredQuestions);\n        });\n    }\n};\n\n/**\n * Initialises.\n * @param {int} unAnsweredQuestions - Total number of unanswered questions\n */\nexport const init = (unAnsweredQuestions) => {\n    // core changes for MAN-1156.\n    // start here.\n    Prefetch.prefetchStrings('core', ['submit']);\n    Prefetch.prefetchStrings('core_admin', ['confirmation']);\n    Prefetch.prefetchStrings('quiz', ['mark', 'examsummery']);\n    // end here.\n    Prefetch.prefetchTemplate(TEMPLATES.submissionConfirmation);\n    registerEventListeners(unAnsweredQuestions);\n};\n"],"names":["SELECTOR","TEMPLATES","handleAttemptSubmission","async","submitAction","unAnsweredQuestions","formData","FormData","closest","formDataObject","forEach","value","key","params","confirm","attemptid","attempt","cmid","Ajax","call","methodname","args","done","response","console","log","result","answeredcount","wrongcount","unansweredcount","totalquetions","remainingtime","notvisited","create","title","type","ModalFactory","types","SAVE_CANCEL","body","Templates","render","hasunanswered","totalunanswered","modal","setSaveButtonText","getRoot","on","ModalEvents","save","e","submit","bind","this","show","fail","error","message","prefetchStrings","prefetchTemplate","document","querySelector","addEventListener","preventDefault","registerEventListeners"],"mappings":";;;;;;;;gUAiCMA,6BACmB,2CADnBA,2BAEiB,yBAGjBC,iCACsB,mCAUtBC,wBAA0BC,MAAOC,aAAcC,iCAGvCC,SAAW,IAAIC,SAASH,aAAaI,QAAQR,6BAG7CS,eAAiB,GACvBH,SAASI,SAAQ,CAACC,MAAOC,OACrBH,eAAeG,KAAOD,eAIpBE,OAAS,CACXC,SAAS,EACTC,UAAWN,eAAeO,QAC1BC,KAAMR,eAAeQ,MAGTC,cAAKC,KAAK,CACtB,CACIC,WAAY,uCACZC,KAAMR,UAId,GACHS,MAAK,SAAUC,aACZC,QAAQC,IAAI,mBAAoBF,UAG5BA,UAAYA,SAASG,OAAQ,CAC7BF,QAAQC,IAAI,mBAAoBF,SAASG,cAEnCC,cAAEA,cAAFC,WAAiBA,WAAjBC,gBAA6BA,gBAA7BC,cAA8CA,cAA9CC,cAA6DA,cAA7DC,WAA4EA,YAAeT,SAASG,kCAI7FO,OAAO,CACpBC,OAAO,mBAAU,cAAe,QAChCC,KAAMC,uBAAaC,MAAMC,YACzBC,KAAMC,mBAAUC,OAAOxC,iCAAkC,CACrDyC,cAAeb,gBAAkB,EACjCc,gBAAiBd,gBACjBF,cAAeA,cACfG,cAAeA,cACfC,cAAeA,cACfC,WAAYA,eAEfV,KACD,SAAUsB,YACHA,MAAQA,MACbA,MAAMC,mBAAkB,mBAAU,OAAQ,SAC1CD,MAAME,UAAUC,GACdC,sBAAYC,KACZ,SAAUC,GACN9C,aAAaI,QAAQR,4BAA4BmD,UACnDC,KAAKC,OAETT,MAAMU,QACNF,KAAKC,OAGL,mBAMF7B,QAAQC,IAAI,sCAAuC,YAG1D8B,MAAK,WAEF/B,QAAQgC,MAAM,mCAAoC,YAGpD,MAAOA,OAELhC,QAAQgC,uBAAgBA,MAAMC,SAAW,yBAsB5BpD,wCAGRqD,gBAAgB,OAAQ,CAAC,6BACzBA,gBAAgB,aAAc,CAAC,mCAC/BA,gBAAgB,OAAQ,CAAC,OAAQ,kCAEjCC,iBAAiB1D,kCArBEI,CAAAA,4BACtBD,aAAewD,SAASC,cAAc7D,8BACxCI,cACAA,aAAa0D,iBAAiB,SAAS3D,MAAAA,IACnC+C,EAAEa,iBACF7D,wBAAwBE,kBAiBhC4D"}