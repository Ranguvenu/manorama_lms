{"version":3,"file":"add_random_form.min.js","sources":["../src/add_random_form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for the add_random_form class.\n *\n * @module    mod_quiz/add_random_form\n * @copyright 2018 Ryan Wyllie <ryan@moodle.com>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n    [\n        'jquery',\n        'local_questions/random_question_form_preview'\n    ],\n    function(\n        $,\n        RandomQuestionFormPreview\n    ) {\n\n    // Wait 2 seconds before reloading the question set just in case\n    // the user is still changing the criteria.\n    var RELOAD_DELAY = 2000;\n    var SELECTORS = {\n        PREVIEW_CONTAINER: '[data-region=\"random-question-preview-container\"]',\n        CATEGORY_FORM_ELEMENT: '[name=\"category\"]',\n        GOAL_FORM_ELEMENT: '[name=\"goal\"]',\n        BOARD_FORM_ELEMENT: '[name=\"board\"]',\n        CLASS_FORM_ELEMENT: '[name=\"class\"]',\n        COURSE_FORM_ELEMENT: '[name=\"course\"]',\n        COURSETOPICS_FORM_ELEMENT: '[name=\"coursetopics\"]',\n        CONCEPT_FORM_ELEMENT: '[name=\"concept\"]',\n        CHAPTER_FORM_ELEMENT: '[name=\"chapter\"]',\n        UNIT_FORM_ELEMENT: '[name=\"unit\"]',\n        SUBCATEGORY_FORM_ELEMENT: '[name=\"includesubcategories\"]',\n        TAG_IDS_FORM_ELEMENT: '[name=\"fromtags[]\"]'\n    };\n\n    /**\n     * Get the selected category value from the form.\n     *\n     * @param {jquery} form The form element.\n     * @return {string} The category value.\n     */\n    var getCategorySelectValue = function(form) {\n        return form.find(SELECTORS.CATEGORY_FORM_ELEMENT).val();\n    };\n       /**\n     * Get the selected goal value from the form.\n     *\n     * @param {jquery} form The form element.\n     * @return {string} The goal value.\n     */\n    var getgoalSelectValue = function(form) {\n        return form.find(SELECTORS.GOAL_FORM_ELEMENT).val();\n    };\n    var getboardSelectValue = function(form) {\n        return form.find(SELECTORS.BOARD_FORM_ELEMENT).val();\n    };\n    var getclassSelectValue = function(form) {\n        return form.find(SELECTORS.CLASS_FORM_ELEMENT).val();\n    };\n       var getcourseSelectValue = function(form) {\n        return form.find(SELECTORS.COURSE_FORM_ELEMENT).val();\n    };\n    var getcoursetopicsSelectValue = function(form) {\n        return form.find(SELECTORS.COURSETOPICS_FORM_ELEMENT).val();\n    };\n     var getchapterSelectValue = function(form) {\n        return form.find(SELECTORS.CHAPTER_FORM_ELEMENT).val();\n    };\n      var getunitSelectValue = function(form) {\n        return form.find(SELECTORS.UNIT_FORM_ELEMENT).val();\n    };\n    var getconceptSelectValue = function(form) {\n        return form.find(SELECTORS.CONCEPT_FORM_ELEMENT).val();\n    };\n\n    /**\n     * Get the category id from the form.\n     *\n     * @param {jquery} form The form element.\n     * @return {string} The category id.\n     */\n    var getCategoryId = function(form) {\n        // The value string is the category id and category context id joined\n        // by a comma.\n        var valueString = getCategorySelectValue(form);\n        // Split the two ids.\n        var values = valueString.split(',');\n        // Return just the category id.\n        return values[0];\n    };\n\n    var getgoalId = function(form) {\n        // The value string is the goal id and goal context id joined\n        // by a comma.\n        var valueString = getgoalSelectValue(form);\n        // Split the two ids.\n        var values = valueString.split(',');\n        // Return just the goal id.\n        return values[0];\n    };\n    var getboardId = function(form) {\n        var valueString = getboardSelectValue(form);\n        var values = valueString.split(',');\n        return values[0];\n    };\n    var getclassId = function(form) {\n        var valueString = getclassSelectValue(form);\n        var values = valueString.split(',');\n        return values[0];\n    };\n    var getcourseId = function(form) {\n        var valueString = getcourseSelectValue(form);\n        var values = valueString.split(',');\n        return values[0];\n    };\n    var getcoursetopicsId = function(form) {\n        var valueString = getcoursetopicsSelectValue(form);\n        var values = valueString.split(',');\n        return values[0];\n    };\n       var getchapterId = function(form) {\n        var valueString = getchapterSelectValue(form);\n        var values = valueString.split(',');\n        return values[0];\n    };\n       var getunitId = function(form) {\n        var valueString = getunitSelectValue(form);\n        var values = valueString.split(',');\n        return values[0];\n    };\n    var getconceptId = function(form) {\n        var valueString = getconceptSelectValue(form);\n        var values = valueString.split(',');\n        return values[0];\n    };\n\n    /**\n     * Check if a top level category is selected in the form.\n     *\n     * @param {jquery} form The form element.\n     * @param {string[]} topCategories List of top category values (matching the select box values)\n     * @return {bool}\n     */\n    var isTopLevelCategorySelected = function(form, topCategories) {\n        var selectedValue = getCategorySelectValue(form);\n        return (topCategories.indexOf(selectedValue) > -1);\n    };\n\n    /**\n     * Check if the form indicates we should include include subcategories in\n     * the filter.\n     *\n     * @param {jquery} form The form element.\n     * @param {string[]} topCategories List of top category values (matching the select box values)\n     * @return {bool}\n     */\n    var shouldIncludeSubcategories = function(form, topCategories) {\n        if (isTopLevelCategorySelected(form, topCategories)) {\n            return true;\n        } else {\n            return form.find(SELECTORS.SUBCATEGORY_FORM_ELEMENT).is(':checked');\n        }\n    };\n\n    /**\n     * Get the tag ids for the selected tags in the form.\n     *\n     * @param {jquery} form The form element.\n     * @return {string[]} The tag ids.\n     */\n    var getTagIds = function(form) {\n        var values = form.find(SELECTORS.TAG_IDS_FORM_ELEMENT).val();\n        return values.map(function(value) {\n            // The tag element value is the tag id and tag name joined\n            // by a comma. So we need to split them to get the tag id.\n            var parts = value.split(',');\n            return parts[0];\n        });\n    };\n\n    /**\n     * Reload the preview section with a new set of filters.\n     *\n     * @param {jquery} form The form element.\n     * @param {int} contextId The current context id.\n     * @param {string[]} topCategories List of top category values (matching the select box values)\n     */\n    var reloadQuestionPreview = function(form, contextId, topCategories) {\n        var previewContainer = form.find(SELECTORS.PREVIEW_CONTAINER);\n        RandomQuestionFormPreview.reload(\n            previewContainer,\n            getCategoryId(form),\n            shouldIncludeSubcategories(form, topCategories),\n            getTagIds(form),\n            contextId,\n            getgoalId(form),\n            getboardId(form),\n            getclassId(form),\n            getcourseId(form),\n            getcoursetopicsId(form),\n            getchapterId(form),\n            getunitId(form),\n            getconceptId(form),\n        );\n    };\n\n    /**\n     * Is this an element we're interested in listening to changes on.\n     *\n     * @param {jquery} element The element to check.\n     * @return {bool}\n     */\n    var isInterestingElement = function(element) {\n        if (element.closest(SELECTORS.CATEGORY_FORM_ELEMENT).length > 0) {\n            return true;\n        }\n\n        if (element.closest(SELECTORS.SUBCATEGORY_FORM_ELEMENT).length > 0) {\n            return true;\n        }\n\n        if (element.closest(SELECTORS.TAG_IDS_FORM_ELEMENT).length > 0) {\n            return true;\n        }\n\n        return false;\n    };\n\n    /**\n     * Listen for changes to any of the interesting elements and reload the form\n     * preview with the new filter values if they are changed.\n     *\n     * The reload is delayed for a small amount of time (see RELOAD_DELAY) in case\n     * the user is actively editing the form. This allows us to avoid having to\n     * send multiple requests to the server on each change.\n     *\n     * Instead we can just send a single request when the user appears to have\n     * finished editing the form.\n     *\n     * @param {jquery} form The form element.\n     * @param {int} contextId The current context id.\n     * @param {string[]} topCategories List of top category values (matching the select box values)\n     */\n    var addEventListeners = function(form, contextId, topCategories) {\n        var reloadTimerId = null;\n        const tagsFilter = form.find(SELECTORS.TAG_IDS_FORM_ELEMENT);\n\n        form.add(tagsFilter).on('change', function(e) {\n            // Only reload the preview when elements that will change the result\n            // are modified.\n            if (!isInterestingElement($(e.target))) {\n                return;\n            }\n            // Show the loading icon to let the user know that the preview\n            // will be updated after their actions.\n            RandomQuestionFormPreview.showLoadingIcon(form);\n\n            if (reloadTimerId) {\n                // Reset the timer each time the form is modified.\n                clearTimeout(reloadTimerId);\n            }\n\n            // Don't immediately reload the question preview section just\n            // in case the user is still modifying the form. We don't want to\n            // spam reload requests.\n            reloadTimerId = setTimeout(function() {\n                reloadQuestionPreview(form, contextId, topCategories);\n            }, RELOAD_DELAY);\n        });\n        const goalfilter = form.find(SELECTORS.GOAL_FORM_ELEMENT);\n\n        form.add(goalfilter).on('change', function(e) {\n            // Only reload the preview when elements that will change the result\n            // are modified.\n            // if (!isInterestingElement($(e.target))) {\n            //     return;\n            // }\n\n            // Show the loading icon to let the user know that the preview\n            // will be updated after their actions.\n            RandomQuestionFormPreview.showLoadingIcon(form);\n\n            if (reloadTimerId) {\n                // Reset the timer each time the form is modified.\n                clearTimeout(reloadTimerId);\n            }\n\n            // Don't immediately reload the question preview section just\n            // in case the user is still modifying the form. We don't want to\n            // spam reload requests.\n            reloadTimerId = setTimeout(function() {\n                reloadQuestionPreview(form, contextId, topCategories);\n            }, RELOAD_DELAY);\n        });\n\n        const boardfilter = form.find(SELECTORS.BOARD_FORM_ELEMENT);\n        form.add(boardfilter).on('change', function(e) {\n            RandomQuestionFormPreview.showLoadingIcon(form);\n            if (reloadTimerId) {\n                // Reset the timer each time the form is modified.\n                clearTimeout(reloadTimerId);\n            }\n            reloadTimerId = setTimeout(function() {\n                reloadQuestionPreview(form, contextId, topCategories);\n            }, RELOAD_DELAY);\n        });\n        const classfilter = form.find(SELECTORS.CLASS_FORM_ELEMENT);\n        form.add(classfilter).on('change', function(e) {\n            RandomQuestionFormPreview.showLoadingIcon(form);\n            if (reloadTimerId) {\n                // Reset the timer each time the form is modified.\n                clearTimeout(reloadTimerId);\n            }\n            reloadTimerId = setTimeout(function() {\n                reloadQuestionPreview(form, contextId, topCategories);\n            }, RELOAD_DELAY);\n        });\n        \n        const coursefilter = form.find(SELECTORS.COURSE_FORM_ELEMENT);\n        form.add(coursefilter).on('change', function(e) {\n            RandomQuestionFormPreview.showLoadingIcon(form);\n            if (reloadTimerId) {\n                // Reset the timer each time the form is modified.\n                clearTimeout(reloadTimerId);\n            }\n            reloadTimerId = setTimeout(function() {\n                reloadQuestionPreview(form, contextId, topCategories);\n            }, RELOAD_DELAY);\n        });\n        const coursetopicsfilter = form.find(SELECTORS.COURSETOPICS_FORM_ELEMENT);\n        form.add(coursetopicsfilter).on('change', function(e) {\n            RandomQuestionFormPreview.showLoadingIcon(form);\n            if (reloadTimerId) {\n                // Reset the timer each time the form is modified.\n                clearTimeout(reloadTimerId);\n            }\n            reloadTimerId = setTimeout(function() {\n                reloadQuestionPreview(form, contextId, topCategories);\n            }, RELOAD_DELAY);\n        });\n        const chapterfilter = form.find(SELECTORS.CHAPTER_FORM_ELEMENT);\n        form.add(chapterfilter).on('change', function(e) {\n            RandomQuestionFormPreview.showLoadingIcon(form);\n            if (reloadTimerId) {\n                // Reset the timer each time the form is modified.\n                clearTimeout(reloadTimerId);\n            }\n            reloadTimerId = setTimeout(function() {\n                reloadQuestionPreview(form, contextId, topCategories);\n            }, RELOAD_DELAY);\n        });\n        const unitfilter = form.find(SELECTORS.UNIT_FORM_ELEMENT);\n        form.add(unitfilter).on('change', function(e) {\n            RandomQuestionFormPreview.showLoadingIcon(form);\n            if (reloadTimerId) {\n                // Reset the timer each time the form is modified.\n                clearTimeout(reloadTimerId);\n            }\n            reloadTimerId = setTimeout(function() {\n                reloadQuestionPreview(form, contextId, topCategories);\n            }, RELOAD_DELAY);\n        });\n\n        const conceptfilter = form.find(SELECTORS.CONCEPT_FORM_ELEMENT);\n        form.add(conceptfilter).on('change', function(e) {\n            RandomQuestionFormPreview.showLoadingIcon(form);\n            if (reloadTimerId) {\n                // Reset the timer each time the form is modified.\n                clearTimeout(reloadTimerId);\n            }\n            reloadTimerId = setTimeout(function() {\n                reloadQuestionPreview(form, contextId, topCategories);\n            }, RELOAD_DELAY);\n        });\n\n    };\n\n    /**\n     * Trigger the first load of the preview section and then listen for modifications\n     * to the form to reload the preview with new filter values.\n     *\n     * @param {jquery} formId The form element id.\n     * @param {int} contextId The current context id.\n     * @param {string[]} topCategories List of top category values (matching the select box values)\n     * @param {bool} isTagsEnabled Whether tags feature is enabled or not.\n     */\n    var init = function(formId, contextId, topCategories, isTagsEnabled) {\n         if (isTagsEnabled == true) {\n             var form = $('#' + formId);\n             reloadQuestionPreview(form, contextId, topCategories, isTagsEnabled);\n             addEventListeners(form, contextId, topCategories, isTagsEnabled);\n         }\n    };\n\n    return {\n        init: init\n    };\n});\n"],"names":["define","$","RandomQuestionFormPreview","SELECTORS","getCategorySelectValue","form","find","val","getgoalId","valueString","getgoalSelectValue","split","getboardId","getboardSelectValue","getclassId","getclassSelectValue","getcourseId","getcourseSelectValue","getcoursetopicsId","getcoursetopicsSelectValue","getchapterId","getchapterSelectValue","getunitId","getunitSelectValue","getconceptId","getconceptSelectValue","shouldIncludeSubcategories","topCategories","selectedValue","indexOf","isTopLevelCategorySelected","is","reloadQuestionPreview","contextId","previewContainer","reload","getCategoryId","map","value","getTagIds","addEventListeners","reloadTimerId","tagsFilter","add","on","e","element","target","closest","length","showLoadingIcon","clearTimeout","setTimeout","goalfilter","boardfilter","classfilter","coursefilter","coursetopicsfilter","chapterfilter","unitfilter","conceptfilter","init","formId","isTagsEnabled"],"mappings":"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"}