{"version":3,"file":"cardPaginate.min.js","sources":["../src/cardPaginate.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * JavaScript for the cardPaginate_preview of the\r\n * add_random_form class.\r\n *\r\n * @module    local_onlineexams/cardPaginate\r\n * @package   local_onlineexams\r\n * @copyright 2018 eabyas info solutions <http://eabyas.in>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(\r\n    [\r\n        'jquery',\r\n        'core/ajax',\r\n        'core/str',\r\n        'core/notification',\r\n        'core/templates',\r\n        'local_onlineexams/paged_content_factory'\r\n    ],\r\n    function(\r\n        $,\r\n        Ajax,\r\n        Str,\r\n        Notification,\r\n        Templates,\r\n        PagedContentFactory\r\n    ) {\r\n\r\n    var ITEMS_PER_PAGE = 6;\r\n    var methodName = '';\r\n    var TEMPLATE_NAME = '';\r\n    var targetID = '';\r\n    var targetRoot = '';\r\n    var Target = '';\r\n    var offset = 0;\r\n    var viewType = 'card';//table/card\r\n\r\n    var SELECTORS = {\r\n        LOADING_ICON_CONTAINER: '[data-region=\"overlay-icon-container\"]',\r\n        PAGINATE_COUNT_CONTAINER: '[data-region=\"'+targetID+'-count-container\"]',\r\n        PAGINATE_LIST_CONTAINER: '[data-region=\"'+targetID+'-list-container\"]'\r\n    };\r\n\r\n    var setOptions = function(options){\r\n        \r\n        methodName = options.methodName;\r\n        TEMPLATE_NAME = options.templateName;\r\n        if(options.hasOwnProperty('targetID')){\r\n            targetID = options.targetID;\r\n            targetRoot = $('#'+targetID);\r\n        }\r\n        if(options.hasOwnProperty('perPage') && typeof(options.perPage) == 'number'){\r\n            ITEMS_PER_PAGE = options.perPage;\r\n        }\r\n        SELECTORS = {\r\n            LOADING_ICON_CONTAINER: '[data-region=\"overlay-icon-container\"]',\r\n            PAGINATE_COUNT_CONTAINER: '[data-region=\"'+targetID+'-count-container\"]',\r\n            PAGINATE_LIST_CONTAINER: '[data-region=\"'+targetID+'-list-container\"]'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Show the loading spinner over the preview section.\r\n     *\r\n     * @param  {jquery} targetID The targetID element.\r\n     */\r\n    var showLoadingIcon = function(targetRoot) {\r\n        targetRoot.find(SELECTORS.LOADING_ICON_CONTAINER).removeClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Hide the loading spinner.\r\n     *\r\n     * @param  {jquery} targetID The targetID element.\r\n     */\r\n    var hideLoadingIcon = function(targetRoot) {\r\n        targetRoot.find(SELECTORS.LOADING_ICON_CONTAINER).addClass('hidden');\r\n    };\r\n\r\n    /**\r\n     * Render the section of text to show the record count.\r\n     *\r\n     * @param  {jquery} targetID The targetID element.\r\n     * @param  {int} recordCount The number of records.\r\n     */\r\n    // var renderrecordCount = function(targetRoot, totalCount) {\r\n    //     Str.get_string('Paginate_totalCount', 'local_onlineexams', totalCount)\r\n    //         .then(function(string) {\r\n    //             targetRoot.find(SELECTORS.PAGINATE_COUNT_CONTAINER).html(string);\r\n    //             return;\r\n    //         })\r\n    //         .fail(Notification.exception);\r\n    // };\r\n\r\n    /**\r\n     * Send a request to the server for more records.\r\n     *\r\n     * @param  {int} userId All records user id.\r\n     * @param  {int} contextId The context where the records will be added.\r\n     * @param  {int} limit How many records to retrieve.\r\n     * @param  {int} offset How many records to skip from the start of the result set.\r\n     * @return {promise} Resolved when the preview section has rendered.\r\n     */\r\n    var requestMethod = function(options, dataoptions, filterdata) {\r\n        var request = {\r\n            methodname: options.methodName,\r\n            args: {\r\n                contextid: dataoptions.contextid,\r\n                options: JSON.stringify(options),\r\n                dataoptions: JSON.stringify(dataoptions),\r\n                offset: options.offset,\r\n                limit: options.perPage,\r\n                filterdata: JSON.stringify(filterdata)\r\n            }\r\n        };\r\n        return Ajax.call([request])[0];\r\n    };\r\n\r\n    /**\r\n     * Build a paged content widget for records with the given criteria. The\r\n     * criteria is used to fetch more records from the server as the user\r\n     * requests new pages.\r\n     *\r\n     * @param  {object[]} options All records user id.\r\n     * @param  {object[]} dataoptions The context where the records will be added.\r\n     * @param  {int} totalCount How many records match the criteria above.\r\n     * @param  {object[]} firstrecords cardPaginates List of records for the first page.\r\n     * @return {promise} A promise resolved with the HTML and JS for the paged content.\r\n     */\r\n    var renderAsPagedContent = function(options, dataoptions, totalCount, firstresponse,filterdata){\r\n        // to control how the records on each page are rendered.\r\n        return PagedContentFactory.createFromAjax(totalCount, ITEMS_PER_PAGE,\r\n            // Callback function to render the requested pages.\r\n            function(pagesData) {\r\n                return pagesData.map(function(pageData) {\r\n                    var offset = pageData.offset;\r\n                    var limit = pageData.limit;\r\n                        options.offset = offset;\r\n                        options.limit = limit;\r\n                        \r\n                        if(offset > 0){\r\n                            return requestMethod(options, dataoptions, filterdata)\r\n                            .then(function(response) {\r\n                                var records = response.records;\r\n                                response[\"cardClass\"] = options.cardClass;\r\n                                \r\n                                response[\"viewtypeCard\"] = false;\r\n                                if(options.viewType == \"card\" || options.viewType == \"table\"){\r\n                                    response[\"viewtypeCard\"] = true;\r\n                                }\r\n                                return Templates.render(options.templateName, {response: response});\r\n                            })\r\n                            .fail(Notification.exception);\r\n                        } else {\r\n                                firstresponse[\"cardClass\"] = options.cardClass;\r\n                                \r\n                                firstresponse[\"viewtypeCard\"] = false;\r\n                                if(options.viewType == \"card\" || options.viewType == \"table\"){\r\n                                    firstresponse[\"viewtypeCard\"] = true;\r\n                                }\r\n                            return Templates.render(options.templateName, {response: firstresponse});\r\n                        }\r\n                    // }\r\n                });\r\n            },\r\n        // Config to set up the paged content.\r\n        {\r\n            controlPlacementBottom: true,\r\n            eventNamespace: 'paginate-paged-content-'+options.targetID,\r\n            persistentLimitKey: 'paginate-paged-content-limit-key'\r\n        }\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Re-render the preview section based on the provided filter criteria.\r\n     *\r\n     * @param  {jquery} targetID The targetID element.\r\n     * @param  {int} userId All records user id.\r\n     * @param  {int} contextId The context where the records will be added.\r\n     * @return {promise} Resolved when the preview section has rendered.\r\n     */\r\n    var reload = function(options, dataoptions,filterdata) {\r\n        //alert(\"hi\");\r\n        setOptions(options);\r\n\r\n        // Show the loading spinner to tell the user that something is happening.\r\n        showLoadingIcon(targetRoot);\r\n\r\n        // Load the first set of records.\r\n        options.offset = 0;\r\n        return requestMethod(options, dataoptions,filterdata)\r\n            .then(function(response) {\r\n\r\n                var totalCount = response.totalcount;\r\n                var records = response.records;\r\n                if (records.length) {\r\n                    // We received some records so render them as paged content\r\n                    // with a paging bar.\r\n                    return renderAsPagedContent(options, dataoptions, totalCount, response, filterdata);\r\n                } else {\r\n                    // If we didn't receive any records then we can return empty\r\n                    // HTML and JS to clear the preview section.\r\n                    // console.log(response.extraparams.nodata);\r\n                    if(response.nodata){\r\n                        return Templates.render(options.templateName, {response: response});\r\n                    }else{\r\n\t\t\t\t\t\t//console.log('response'+JSON.stringify(response));\r\n\t\t\t\t\t\tvar name=Str.get_string('no_tests_data', 'local_onlineexams');\r\n\t\t\t\t\t\tif(options.targetID == 'manage_courses'){\r\n\t\t\t\t\t\t\tname =Str.get_string('no_tests_data', 'local_onlineexams');\r\n\t\t\t\t\t\t}\r\n                        if(options.targetID == 'manage_units'){\r\n                            name =Str.get_string('no_data_available', 'theme_horizon');\r\n                        }\r\n\t\t\t\t\t\treturn name.then(function(s) {\r\n                        return Templates.render('local_onlineexams/no-data', {name:s});\r\n\t\t\t\t\t\t});\r\n                    }\r\n                    \r\n                    //return $.Deferred().resolve('', '');\r\n                }\r\n            })\r\n            .then(function(html, js) {\r\n                // Show the user the records set.\r\n                targetRoot = $('#'+options.targetID);\r\n                var paginatelistcontainer = '[data-region=\"'+options.targetID+'-list-container\"]';\r\n                var container = targetRoot.find(paginatelistcontainer);\r\n                Templates.replaceNodeContents(container, html, js);\r\n                return;\r\n            })\r\n            .always(function() {\r\n                targetRoot = $('#'+options.targetID);\r\n                hideLoadingIcon(targetRoot);\r\n            })\r\n            .fail(Notification.exception);\r\n\r\n    };\r\n\r\n\r\n    //added for the filtering the data\r\n    var filteringData = function(e,submitid) {\r\n        var formdata =  $(\"form#\"+submitid+\"\").serializeArray();\r\n        values = [];\r\n        filterdatavalue = [];\r\n        $.each(formdata, function (i, field) {\r\n            valuedata = [];\r\n            if(field.name != '_qf__filters_form' && field.name != 'sesskey'){\r\n                if(field.name == 'options' || field.name == 'dataoptions'){\r\n                    values[field.name] = field.value;\r\n                }else{\r\n                    var str = field.name;\r\n                    if(str.indexOf('[]') != -1){\r\n                        field.name = str.substring(0, str.length - 2);\r\n                    }\r\n                    if(field.value != '_qf__force_multiselect_submission'){\r\n                        if(field.name in filterdatavalue){\r\n                            filterdatavalue[field.name] = filterdatavalue[field.name]+','+field.value;\r\n                        }else{  \r\n                            filterdatavalue[field.name] = field.value;\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        });\r\n        var filtervalue = $('#global_filter').val();\r\n        if(filtervalue){\r\n            filterdatavalue[$('#global_filter').attr('name')] = filtervalue;\r\n        }\r\n        optionsparsondata     = JSON.parse(values['options']);\r\n        dataoptionsparsondata = JSON.parse(values['dataoptions']);\r\n        // filterdataparsondata  =  Object.assign({}, filterdatavalue);\r\n        filterdataparsondata = $.extend({}, filterdatavalue);\r\n        $('#global_filter').attr('data-filterdata', JSON.stringify(filterdataparsondata));\r\n        return reload(optionsparsondata, dataoptionsparsondata,filterdataparsondata);\r\n    };\r\n\r\n    //added for the reset the data\r\n    var resetingData = function(e,submitid) {\r\n        var formdata =  $(\"form#\"+submitid+\"\").serializeArray();\r\n        values = [];\r\n        filterdatavalue = [];\r\n        $.each(formdata, function (i, field) {\r\n            valuedata = [];\r\n            if(field.name != '_qf__filters_form' && field.name != 'sesskey'){\r\n                if(field.name == 'options' || field.name == 'dataoptions'){\r\n                    values[field.name] = field.value;\r\n                }\r\n            }\r\n        });\r\n        var filtervalue = $('#global_filter').val();\r\n        if(filtervalue){\r\n            filterdatavalue[$('#global_filter').attr('name')] = filtervalue;\r\n        }\r\n        optionsparsondata     = JSON.parse(values['options']);\r\n        dataoptionsparsondata = JSON.parse(values['dataoptions']);\r\n        // filterdataparsondata  =  Object.assign({}, filterdatavalue);\r\n        filterdataparsondata = $.extend({}, filterdatavalue);\r\n        $('#global_filter').attr('data-filterdata', '[]');\r\n        // $('#global_filter').data('filterdata', '[]');\r\n        reload(optionsparsondata, dataoptionsparsondata, filterdataparsondata);\r\n        var reset =  $(\"form#\"+submitid+\"\")[0].reset();\r\n        // $(\"#fitem_id_acceptchallengedate_\"+submitid+\" .custom-select\").attr(\"disabled\", \"disabled\");\r\n        // $(\"#fitem_id_challengeenddate_\"+submitid+\" .custom-select\").attr(\"disabled\", \"disabled\");\r\n        $(\".tag-info\").html(\"\");\r\n        $(\"div.form-autocomplete-selection\").html(\"\");\r\n        $(\"div.form-autocomplete-selection\").removeClass(\"tag-info\");\r\n        $(\"div.form-autocomplete-selection\").removeClass(\"tag\");\r\n    };\r\n    return {\r\n        reload: reload,\r\n        showLoadingIcon: showLoadingIcon,\r\n        hideLoadingIcon: hideLoadingIcon,\r\n        filteringData:filteringData,\r\n        resetingData:resetingData\r\n    };\r\n});\r\n"],"names":["define","$","Ajax","Str","Notification","Templates","PagedContentFactory","ITEMS_PER_PAGE","targetID","targetRoot","SELECTORS","LOADING_ICON_CONTAINER","PAGINATE_COUNT_CONTAINER","PAGINATE_LIST_CONTAINER","showLoadingIcon","find","removeClass","hideLoadingIcon","addClass","requestMethod","options","dataoptions","filterdata","request","methodname","methodName","args","contextid","JSON","stringify","offset","limit","perPage","call","reload","templateName","hasOwnProperty","setOptions","then","response","totalCount","totalcount","records","length","firstresponse","createFromAjax","pagesData","map","pageData","cardClass","viewType","render","fail","exception","controlPlacementBottom","eventNamespace","persistentLimitKey","renderAsPagedContent","nodata","name","get_string","s","html","js","paginatelistcontainer","container","replaceNodeContents","always","filteringData","e","submitid","formdata","serializeArray","values","filterdatavalue","each","i","field","valuedata","value","str","indexOf","substring","filtervalue","val","attr","optionsparsondata","parse","dataoptionsparsondata","filterdataparsondata","extend","resetingData","reset"],"mappings":"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"}